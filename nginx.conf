
#user  nobody;
worker_processes  1;
daemon off;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    upstream database {
        postgres_server  127.0.0.1 dbname=postgres
                         user=postgres;
    }

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            add_header "Content-Type" text/html;
            postgres_pass   database;
            postgres_output text;
            postgres_query  HEAD GET "SELECT html FROM index_html";

            add_header "X-PgApps-Query" $postgres_query;
        }

        location ~ /(?<route>[\w\/]+).html {
            add_header "Content-Type" text/html;
            set_by_lua $route "return string.gsub(ngx.arg[1], '/', '_')" $route;
            postgres_pass   database;
            postgres_query  HEAD GET "SELECT html FROM ${route}_html";
            postgres_output text;

            postgres_escape $data $request_body;
            postgres_query  POST PUT DELETE "SELECT * FROM ${route}_html(${data})";
            postgres_rewrite POST changes 201;

            add_header "X-PgApps-Query" $postgres_query;
        }

        location ~ /(?<route>[\w\/]+).json {
            add_header "Content-Type" text/json;
            set_by_lua $route "return string.gsub(ngx.arg[1], '/', '_')" $route;
            postgres_pass   database;
            postgres_query  "SELECT * FROM ${route}_json";
            rds_json          on;
            add_header "X-PgApps-Query" $postgres_query;
        }

        location ~ /(?<route>[\w\/]+).css {
            add_header "Content-Type" text/css;
            set_by_lua $route "return string.gsub(ngx.arg[1], '/', '_')" $route;
            postgres_pass   database;
            postgres_query  "SELECT css FROM ${route}_css";
            postgres_output text;
            add_header "X-PgApps-Query" $postgres_query;
        }

        location ~ /(?<route>[\w\/]+).js {
            add_header "Content-Type" application/javascript;
            set_by_lua $route "return string.gsub(ngx.arg[1], '/', '_')" $route;
            postgres_pass   database;
            postgres_query  "SELECT js FROM ${route}_js";
            postgres_output text;
            add_header "X-PgApps-Query" $postgres_query;
        }

        # location ~ /(?<route>\w+) {
        #
        #     access_by_lua '
        #         if string.find(ngx.req.get_headers()["Accept"], "json") then
        #             return ngx.exec("@view_json")
        #         end
        #
        #         return ngx.exec("@view_html")
        #     ';
        #
        #
        #     # postgres_pass   database;
        #     # # postgres_escape $esc_route $route;
        #     # # rds_json          on;
        #     # postgres_query  "SELECT * FROM $route";
        #     # postgres_output none;
        #     #
        #     # postgres_set $res_html 0 html;
        #     # set $html = $res_html;
        #     # # echo $res_html;
        #     #
        #     # add_header "X-PgApps-html" $res_html;
        #     # add_header "X-PgApps-Columns" $postgres_columns;
        #     # add_header "X-PgApps-Rows" $postgres_rows;
        #     # add_header "X-PgApps-Query" $postgres_query;
        #
        #     # if ($res_html != '') {
        #     #     add_header "Content-Type" text/html;
        #     # }
        #
        #
        #     #  echo "querystring: $query_string";
        #     #   echo "method: $echo_request_method";
        #     #   echo "body: $echo_request_body";
        #     #   echo "content length: $http_content_length";
        #     #   echo '///';
        #
        #     # echo 'test:';
        #     # echo $test_html;
        #
        #
        #     # root   html;
        #     # index  index.html index.htm;
        # }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
